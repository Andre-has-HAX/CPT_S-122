#ifndef HEADER_H
#define HEADER_H

/*
For each of the following problems create a separate Microsoft VS 2012 or 2013 project. Within each project you must have at least one header file (.h) and two source files (.c). However, I highly encourage you to separate your test driver code from your application/library code, which would require at least two more files (one .h and one .c). Before you turn in this assignment, be sure to place each project folder into a single <your last name>_pa1 folder.
 
1. Write a function called maximum_occurences() that accepts a pointer to a string (consisting of alphanumeric and whitespace characters only), a pointer to an array of struct occurrences,  a pointer to an integer, and a pointer to a character as arguments. The structure is defined as follows:
 
typedef struct occurrences
{
          int num_occurrences;
          double frequency;
} Occurrences;
 
The function determines the frequency of each character found in the array. The frequency is defined as: number of one character symbol / total number of characters. The function should use the second array argument (of struct occurrences) to keep track of the frequency of each character. Also, it must return, through the pointers, the maximum number of occurrences of any one character and the corresponding character for which the maximum represents. Thus, for a string such as “test string”, ‘t’ occurs 3 times, which is the maximum occurrences for any one character in the string.
*/

#include <stdio.h>
#include <string.h>

struct occurrences
{
	char character;
	int num_occurrences;
	double frequency;
} Occurrences;

void maximum_occurrences(char *stringPtr, int *popCharCountPtr, char *popCharPtr, struct Occurrences *structPtr);
// referenced http://www.nongnu.org/c-prog-book/online/x641.html for syntax of ptrs as arguments
// referenced http://stackoverflow.com/questions/2360794/how-to-pass-an-array-of-struct-using-pointer-in-c-c 
// for how to pass an ptr to an array of structs

#endif

void maximum_occurrences(char *stringPtr, int *popCharCountPtr, char *popCharPtr, struct Occurrences *structPtr[])
{
	int i, popCharCount;
	char popChar;
	

	// http://www.cprogramming.com/tutorial/c/lesson3.html for loop review
	for (i = 0; stringPtr[i] != '\0'; i++)
	{
		structPtr->
	}

}

int main()
{
	char popChar;
	int popCharCount;
	char string[40] = "Syntax sounds like sin tax which I hate";
	struct occurrences myStruct;

	char *stringPtr = &string[0];
	char *popCharCountPtr = &popCharCount;
	int *popCharPtr = &popChar;
	struct occurrences *structPtr = &myStruct;

	maximum_occurrences(*stringPtr, *popCharCountPtr, *popCharPtr, *structPtr);

	return 0;

}
